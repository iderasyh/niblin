---
description: Complete implementation plan for the 11-screen onboarding flow with English/Albanian localization
---

# Onboarding Flow Implementation Plan

## Quick Implementation Checklist

- **Stage 1**: Set up localization keys and domain models for onboarding data
- **Stage 2**: Create onboarding state management with Riverpod controllers  
- **Stage 3**: Build reusable UI components and screen layouts
- **Stage 4**: Implement screen-by-screen navigation flow with go_router
- **Stage 5**: Add paywall integration and subscription handling
- **Stage 6**: Connect data persistence and user profile creation
- **Stage 7**: Polish animations, transitions, and final testing

---

## Detailed Implementation Plan

### Stage 1: Foundation Setup (Domain & Localization)

#### 1.1 Localization Keys Setup
- Add all onboarding text keys to [app_en.arb](mdc:lib/l10n/app_en.arb) and [app_sq.arb](mdc:lib/l10n/app_sq.arb)
- Include keys for: headlines, subtexts, CTA buttons, form labels, error messages
- Structure keys with prefixes: `onboarding_screen1_headline`, `onboarding_screen1_subtext`, etc.

#### 1.2 Domain Models
Create in `lib/src/features/onboarding/domain/`:

**onboarding_step.dart**
```dart
enum OnboardingStep {
  emotionalHook,
  factOne,
  relatableProblem, 
  featureBenefits,
  babyProfile,
  factTwo,
  allergiesPreferences,
  factThree,
  goals,
  lockedPreview,
  paywall
}
```

**baby_profile.dart**  
```dart
class BabyProfile {
  final String name;
  final DateTime dateOfBirth;
  final FeedingStyle feedingStyle;
  final List<Allergen> allergies;
  final List<OnboardingGoal> goals;
  
  // Include toMap/fromMap for Firestore
}
```

**feeding_style.dart**, **allergen.dart**, **onboarding_goal.dart**
- Enums for feeding styles (purees, BLW, mixed)
- Allergen types (dairy, eggs, peanuts, wheat, other)
- Goal types (healthy growth, prevent picky eating, allergen safety, meal planning)

#### 1.3 Repository Setup  
Create `lib/src/features/onboarding/data/onboarding_repository.dart`:
- Handle baby profile persistence to Firestore
- Track onboarding completion status
- Store user preferences and goals
- Follow [Repository Implementation Rules](mdc:.cursor/rules/repository-implementation.mdc)

### Stage 2: State Management (Application Layer)

#### 2.1 Onboarding Controller
Create `lib/src/features/onboarding/application/onboarding_controller.dart`:

```dart
@riverpod
class OnboardingController extends _$OnboardingController {
  @override
  OnboardingState build() => const OnboardingState.initial();
  
  void nextStep() { /* navigate logic */ }
  void previousStep() { /* back navigation */ }
  void updateBabyProfile(BabyProfile profile) { /* state update */ }
  void selectAllergies(List<Allergen> allergies) { /* update allergies */ }
  void selectGoals(List<OnboardingGoal> goals) { /* update goals */ }
  Future<void> completeOnboarding() { /* save to repository */ }
}
```

#### 2.2 Onboarding State
Create sealed classes for state management:
- `OnboardingState` with loading, data, error states  
- Track current step, baby profile data, form validation
- Progress tracking (current step / total steps)

#### 2.3 Form Validation
- Baby name validation (non-empty, reasonable length)
- Date of birth validation (reasonable age range)
- Required field validation with localized error messages

### Stage 3: UI Components (Presentation Layer)

#### 3.1 Base Onboarding Layout
Create `lib/src/features/onboarding/presentation/widgets/onboarding_layout.dart`:
- Consistent structure: image area, content area, CTA button
- Progress indicator at top
- Safe area handling for different screen sizes
- Responsive design using [responsive_utils.dart](mdc:lib/src/core/utils/responsive_utils.dart)

#### 3.2 Reusable Components
Create in `lib/src/features/onboarding/presentation/widgets/`:

**onboarding_header.dart**
- Title, subtitle with consistent typography
- Support for rich text formatting

**onboarding_cta_button.dart**  
- Primary action button with loading states
- Consistent styling with [app_colors.dart](mdc:lib/src/core/constants/app_colors.dart)

**progress_indicator.dart**
- Step progress visualization
- Animated transitions between steps

**baby_profile_form.dart**
- Name input field with validation
- Date picker for birth date
- Feeding style selection (radio buttons/chips)

**allergy_selector.dart**
- Multi-select chips for allergens
- Custom "other" input option

**goals_selector.dart**
- Goal selection with descriptions
- Multiple selection support

#### 3.3 Image Integration
- Create image assets structure in `assets/images/onboarding/`
- Image loading widgets with placeholder states
- Responsive image sizing for different screen densities

### Stage 4: Screen Implementation & Navigation

#### 4.1 Screen Structure
Create individual screens in `lib/src/features/onboarding/presentation/screens/`:

- `emotional_hook_screen.dart` (Screen 1)
- `fact_one_screen.dart` (Screen 2)  
- `relatable_problem_screen.dart` (Screen 3)
- `feature_benefits_screen.dart` (Screen 4)
- `baby_profile_screen.dart` (Screen 5)
- `fact_two_screen.dart` (Screen 6)
- `allergies_preferences_screen.dart` (Screen 7)
- `fact_three_screen.dart` (Screen 8)
- `goals_screen.dart` (Screen 9)
- `locked_preview_screen.dart` (Screen 10)
- `paywall_screen.dart` (Screen 11)

#### 4.2 Navigation Setup
Update [app_router.dart](mdc:lib/src/routing/app_router.dart):

```dart
enum AppRoute {
  // existing routes...
  onboardingStart,
  onboardingFactOne,
  onboardingProblem,
  // ... all onboarding screens
  onboardingPaywall,
}
```

Add route definitions with proper navigation flow:
- Sequential navigation between screens
- Back button handling
- Skip functionality where appropriate
- Deep linking to specific onboarding steps

#### 4.3 Navigation Logic
- Implement step-by-step navigation in OnboardingController
- Handle platform back button correctly
- Progress persistence (resume from last completed step)
- Exit confirmation dialogs

### Stage 5: Paywall & Subscription Integration

#### 5.1 Subscription Service
Create `lib/src/features/subscription/` feature:
- Revenue Cat or similar integration
- Subscription plans (monthly/yearly)
- Purchase flow handling
- Subscription status tracking

#### 5.2 Paywall Screen Implementation
- Product pricing display
- Subscription plan comparison
- Purchase button integration
- Loading states during purchase
- Error handling for failed purchases
- Success/failure feedback

#### 5.3 Content Gating
- Lock/unlock logic for premium features
- Trial period handling
- Subscription status checking

### Stage 6: Data Persistence & Integration

#### 6.1 User Profile Creation
Integration with [auth repository](mdc:lib/src/features/auth/data/firebase_auth_repository.dart):
- Link baby profile to authenticated user
- Create user document in Firestore
- Handle onboarding completion flag

#### 6.2 Data Synchronization
- Save onboarding data progressively
- Handle offline scenarios
- Data validation before final submission
- Error handling and retry logic

#### 6.3 Analytics Integration
- Track onboarding funnel metrics
- Screen view events
- Conversion tracking
- Drop-off point analysis

### Stage 7: Polish & Quality Assurance

#### 7.1 Animations & Transitions
- Screen transition animations
- Micro-interactions for form elements
- Loading animations
- Success feedback animations
- Progress indicator animations

#### 7.2 Accessibility
- Semantic labels for screen readers
- Keyboard navigation support
- Color contrast compliance
- Font scaling support
- Focus management

#### 7.3 Testing Strategy
- Unit tests for controllers and models
- Widget tests for UI components
- Integration tests for complete flow
- Localization testing (English/Albanian)
- Device testing (various screen sizes)

#### 7.4 Error Handling
- Network error scenarios
- Form validation errors
- Payment failure handling
- Graceful degradation
- User-friendly error messages

#### 7.5 Performance Optimization
- Image optimization and caching
- Lazy loading for heavy content
- Memory management
- Battery optimization
- App size optimization

---

## Implementation Notes

### Following Project Architecture
- Maintain feature-first structure: `lib/src/features/onboarding/{domain,data,application,presentation}`
- Use relative imports as per [Import Style Rules](mdc:.cursor/rules/import-style.mdc)
- Follow [Model Placement Rules](mdc:.cursor/rules/model-placement.mdc) for domain models
- Repository implementation per [Repository Rules](mdc:.cursor/rules/repository-implementation.mdc)

### Technical Considerations
- Riverpod providers with code generation (`@riverpod`)
- go_router integration per [Routing Rules](mdc:.cursor/rules/routing.mdc)
- Consistent theming with [app_theme.dart](mdc:lib/src/theme/app_theme.dart)
- Responsive design using [responsive_utils.dart](mdc:lib/src/core/utils/responsive_utils.dart)

### Quality Standards
- Clean, maintainable code following Flutter best practices
- Comprehensive error handling and edge case coverage
- Performance-optimized with smooth 60fps animations
- Full localization support for English/Albanian
- Thorough testing coverage at all levels